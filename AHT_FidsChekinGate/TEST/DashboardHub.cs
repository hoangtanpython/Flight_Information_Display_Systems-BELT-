using DigitalSignageSevice.Repositories;
using Microsoft.AspNetCore.SignalR;

namespace DigitalSignageSevice.Hubs
{
    public class DashboardHub : Hub
    {
        private readonly FidsRepository _fidsRepository;

        public DashboardHub(FidsRepository fidsRepository)
        {
            _fidsRepository = fidsRepository ?? throw new ArgumentNullException(nameof(fidsRepository));
        }

        public override async Task OnConnectedAsync()
        {
            var httpContext = Context.GetHttpContext();
            string belt = httpContext?.Request.Query["belt"]; // belt=B1, B2...
                                                              // Cho ph√©p client join v√†o group ri√™ng t·ª´ng belt n·∫øu truy·ªÅn l√™n
            if (!string.IsNullOrEmpty(belt))
            {
                await Groups.AddToGroupAsync(Context.ConnectionId, $"belt-{belt}");
            }
            await base.OnConnectedAsync();

            var connectionId = Context.ConnectionId;
            var clientIp = Context.GetHttpContext()?.Connection.RemoteIpAddress?.ToString()?.Trim();

            // ‚úÖ S·ª≠a l·ªói IP "::1" (IPv6 loopback)
            if (clientIp == "::1") clientIp = "127.0.0.1";

            if (string.IsNullOrWhiteSpace(clientIp))
            {
                Console.WriteLine("‚ùå Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ƒë·ªãa ch·ªâ IP client.");
                await base.OnConnectedAsync();
                return;
            }

            Console.WriteLine($"‚úÖ K·∫øt n·ªëi m·ªõi t·ª´ IP: {clientIp} - ConnectionId: {connectionId}");

            var location = _fidsRepository.GetNameByIp(clientIp);

            if (string.IsNullOrWhiteSpace(location))
            {
                Console.WriteLine($"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Location t∆∞∆°ng ·ª©ng v·ªõi IP: {clientIp}");
                await base.OnConnectedAsync();
                return;
            }

            bool updated = _fidsRepository.UpdateOnConnectionId(clientIp, connectionId);

            if (!updated)
            {
                Console.WriteLine($"‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ConnectionId cho IP: {clientIp}");
                await base.OnConnectedAsync();
                return;
            }

            if (location.ToLower().Contains("counter"))
            {
                if (_fidsRepository.GetFlight(clientIp))
                {
                    await SendToClient(location);
                    Console.WriteLine("‚úÖ C·∫≠p nh·∫≠t ConnectionId + Flight th√†nh c√¥ng.");
                }
                else
                {
                    Console.WriteLine("‚úÖ Ch·ªâ c·∫≠p nh·∫≠t ConnectionId (ch∆∞a c√≥ Flight).");
                }
            }
            else if (location.ToLower().Contains("server"))
            {
                await SendToServer("Counter");
                Console.WriteLine("üîÅ G·ª≠i l·∫°i th√¥ng tin Counter v·ªÅ Server.");
            }

            await base.OnConnectedAsync();
        }

        public override async Task OnDisconnectedAsync(Exception exception)
        {
            var connectionId = Context.ConnectionId;
            var clientIp = Context.GetHttpContext()?.Connection.RemoteIpAddress?.ToString()?.Trim();

            if (clientIp == "::1") clientIp = "127.0.0.1"; // ‚úÖ x·ª≠ l√Ω ·ªü c·∫£ OnDisconnectedAsync

            if (!string.IsNullOrWhiteSpace(clientIp))
            {
                Console.WriteLine($"üîå Ng·∫Øt k·∫øt n·ªëi t·ª´ IP: {clientIp} - ConnectionId: {connectionId}");
                _fidsRepository.UpdateDisConnectionId(clientIp);
            }

            await base.OnDisconnectedAsync(exception);
        }

        public async Task ReloadServerDashboard()
        {
            var data = _fidsRepository.GetConnectionId("Admin");
            if (data == null || !data.Any())
            {
                Console.WriteLine("‚ö† Kh√¥ng t√¨m th·∫•y Server Admin ƒë·ªÉ reload.");
                return;
            }

            foreach (var d in data.Where(x => !string.IsNullOrWhiteSpace(x.ConnectionId)))
            {
                await Clients.Client(d.ConnectionId).SendAsync("ReceivedServerReload", d.ConnectionId, "Reload");
            }
        }

        public async Task ReloadClients(string checkin, string gate)
        {
            var data = _fidsRepository.GetConnectionIdClients(checkin, gate);
            if (data == null || !data.Any()) return;

            foreach (var d in data.Where(x => !string.IsNullOrWhiteSpace(x.ConnectionId)))
            {
                await Clients.Client(d.ConnectionId).SendAsync("ReceivedServerReloadToClient", d.ConnectionId, "ReloadClient");
            }
        }

        public async Task SendToServer(string local)
        {
            var data = _fidsRepository.GetAllCheckin(local);
            if (data == null || !data.Any()) return;

            foreach (var d in data.Where(x =>
                !string.IsNullOrWhiteSpace(x.ConnectionId) &&
                !string.IsNullOrWhiteSpace(x.Location) &&
                x.Location.ToLower().Contains("server")))
            {
                await Clients.Client(d.ConnectionId).SendAsync("SendToServer", data);
            }
        }

        public async Task SendToClient(string location)
        {
            Console.WriteLine($"üì§ G·ª≠i th√¥ng tin t·ªõi client t·∫°i location: {location}");
            var entity = _fidsRepository.GetEntity(location);

            if (entity == null || string.IsNullOrWhiteSpace(entity.ConnectionId))
            {
                Console.WriteLine("‚ö† Kh√¥ng t√¨m th·∫•y ConnectionId h·ª£p l·ªá cho client.");
                return;
            }

            await Clients.Client(entity.ConnectionId).SendAsync("SendToClient", entity);
        }

        public async Task DeleteFlightFromClient1(string flightName)
        {
            if (string.IsNullOrWhiteSpace(flightName))
            {
                Console.WriteLine("‚ùå T√™n chuy·∫øn bay tr·ªëng.");
                return;
            }

            flightName = flightName.Trim();

            if (_fidsRepository.GetFlightByName(flightName))
            {
                await SendToServer("Counter");
                Console.WriteLine("üóë ƒê√£ x√≥a v√† c·∫≠p nh·∫≠t chuy·∫øn bay.");
            }
            else
            {
                Console.WriteLine("üóë ƒê√£ x√≥a chuy·∫øn bay nh∆∞ng kh√¥ng c√≥ c·∫≠p nh·∫≠t.");
            }
        }

        public async Task<bool> DeleteFlightFromClient(string flightName)
        {
            if (string.IsNullOrWhiteSpace(flightName)) return false;

            flightName = flightName.Trim();

            if (!_fidsRepository.GetFlightByName(flightName))
            {
                Console.WriteLine("‚ö† Chuy·∫øn bay kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.");
                return false;
            }

            try
            {
                await SendToServer("Counter");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi g·ª≠i th√¥ng tin x√≥a chuy·∫øn bay: {ex.Message}");
                return false;
            }
        }

        public async Task PushBeltUpdate(string belt)
        {
            var flight = _fidsRepository.GetCurrentArrivalForBelt(belt, 60);
            await Clients.Group($"belt-{belt}").SendAsync("UpdateBeltFlight", flight);
        }

    }
}